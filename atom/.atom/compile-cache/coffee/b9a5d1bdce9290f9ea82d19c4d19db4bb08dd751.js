(function() {
  var BLOCKQUOTE_REGEX, LIST_AL_REGEX, LIST_AL_TASK_REGEX, LIST_OL_REGEX, LIST_OL_TASK_REGEX, LIST_UL_REGEX, LIST_UL_TASK_REGEX, LineMeta, TYPES, incStr, utils;

  utils = require("../utils");

  LIST_UL_TASK_REGEX = /^(\s*)([*+-\.])\s+\[[xX ]\]\s*(.*)$/;

  LIST_UL_REGEX = /^(\s*)([*+-\.])\s+(.*)$/;

  LIST_OL_TASK_REGEX = /^(\s*)(\d+)\.\s+\[[xX ]\]\s*(.*)$/;

  LIST_OL_REGEX = /^(\s*)(\d+)\.\s+(.*)$/;

  LIST_AL_TASK_REGEX = /^(\s*)([a-zA-Z]+)\.\s+\[[xX ]\]\s*(.*)$/;

  LIST_AL_REGEX = /^(\s*)([a-zA-Z]+)\.\s+(.*)$/;

  BLOCKQUOTE_REGEX = /^(\s*)(>)\s*(.*)$/;

  incStr = function(str) {
    var num;
    num = parseInt(str, 10);
    if (isNaN(num)) {
      return utils.incrementChars(str);
    } else {
      return num + 1;
    }
  };

  TYPES = [
    {
      name: ["list", "ul", "task"],
      regex: LIST_UL_TASK_REGEX,
      nextLine: function(matches) {
        return "" + matches[1] + matches[2] + " [ ] ";
      }
    }, {
      name: ["list", "ul"],
      regex: LIST_UL_REGEX,
      nextLine: function(matches) {
        return "" + matches[1] + matches[2] + " ";
      }
    }, {
      name: ["list", "ol", "task"],
      regex: LIST_OL_TASK_REGEX,
      nextLine: function(matches) {
        return "" + matches[1] + (incStr(matches[2])) + ". [ ] ";
      }
    }, {
      name: ["list", "ol"],
      regex: LIST_OL_REGEX,
      nextLine: function(matches) {
        return "" + matches[1] + (incStr(matches[2])) + ". ";
      }
    }, {
      name: ["list", "ol", "al", "task"],
      regex: LIST_AL_TASK_REGEX,
      nextLine: function(matches) {
        return "" + matches[1] + (incStr(matches[2])) + ". [ ] ";
      }
    }, {
      name: ["list", "ol", "al"],
      regex: LIST_AL_REGEX,
      nextLine: function(matches) {
        return "" + matches[1] + (incStr(matches[2])) + ". ";
      }
    }, {
      name: ["blockquote"],
      regex: BLOCKQUOTE_REGEX,
      nextLine: function(matches) {
        return "" + matches[1] + "> ";
      }
    }
  ];

  module.exports = LineMeta = (function() {
    function LineMeta(line) {
      this.line = line;
      this.types = [];
      this.head = "";
      this.body = "";
      this.indent = "";
      this.nextLine = "";
      this._findMeta();
    }

    LineMeta.prototype._findMeta = function() {
      var matches, type, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = TYPES.length; _i < _len; _i++) {
        type = TYPES[_i];
        if (matches = type.regex.exec(this.line)) {
          this.types = type.name;
          this.indent = matches[1];
          this.head = matches[2];
          this.body = matches[3];
          this.nextLine = type.nextLine(matches);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    LineMeta.prototype.isTaskList = function() {
      return this.types.indexOf("task") !== -1;
    };

    LineMeta.prototype.isList = function(type) {
      return this.types.indexOf("list") !== -1 && (!type || this.types.indexOf(type) !== -1);
    };

    LineMeta.prototype.isContinuous = function() {
      return !!this.nextLine;
    };

    LineMeta.prototype.isEmptyBody = function() {
      return !this.body;
    };

    LineMeta.isList = function(line) {
      return LIST_UL_REGEX.test(line) || LIST_OL_REGEX.test(line) || LIST_AL_REGEX.test(line);
    };

    LineMeta.isOrderedList = function(line) {
      return LIST_OL_REGEX.test(line) || LIST_AL_REGEX.test(line);
    };

    LineMeta.isUnorderedList = function(line) {
      return LIST_UL_REGEX.test(line);
    };

    LineMeta.incStr = incStr;

    return LineMeta;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvZXBzZS9FcENvbmZGaWxlcy9hdG9tLy5hdG9tL3BhY2thZ2VzL21hcmtkb3duLXdyaXRlci9saWIvaGVscGVycy9saW5lLW1ldGEuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHlKQUFBOztBQUFBLEVBQUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxVQUFSLENBQVIsQ0FBQTs7QUFBQSxFQUVBLGtCQUFBLEdBQXFCLHFDQUZyQixDQUFBOztBQUFBLEVBR0EsYUFBQSxHQUFxQix5QkFIckIsQ0FBQTs7QUFBQSxFQUlBLGtCQUFBLEdBQXFCLG1DQUpyQixDQUFBOztBQUFBLEVBS0EsYUFBQSxHQUFxQix1QkFMckIsQ0FBQTs7QUFBQSxFQU1BLGtCQUFBLEdBQXFCLHlDQU5yQixDQUFBOztBQUFBLEVBT0EsYUFBQSxHQUFxQiw2QkFQckIsQ0FBQTs7QUFBQSxFQVFBLGdCQUFBLEdBQXFCLG1CQVJyQixDQUFBOztBQUFBLEVBVUEsTUFBQSxHQUFTLFNBQUMsR0FBRCxHQUFBO0FBQ1AsUUFBQSxHQUFBO0FBQUEsSUFBQSxHQUFBLEdBQU0sUUFBQSxDQUFTLEdBQVQsRUFBYyxFQUFkLENBQU4sQ0FBQTtBQUNBLElBQUEsSUFBRyxLQUFBLENBQU0sR0FBTixDQUFIO2FBQW1CLEtBQUssQ0FBQyxjQUFOLENBQXFCLEdBQXJCLEVBQW5CO0tBQUEsTUFBQTthQUNLLEdBQUEsR0FBTSxFQURYO0tBRk87RUFBQSxDQVZULENBQUE7O0FBQUEsRUFlQSxLQUFBLEdBQVE7SUFDTjtBQUFBLE1BQ0UsSUFBQSxFQUFNLENBQUMsTUFBRCxFQUFTLElBQVQsRUFBZSxNQUFmLENBRFI7QUFBQSxNQUVFLEtBQUEsRUFBTyxrQkFGVDtBQUFBLE1BR0UsUUFBQSxFQUFVLFNBQUMsT0FBRCxHQUFBO2VBQWEsRUFBQSxHQUFHLE9BQVEsQ0FB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

//# sourceURL=/home/epse/EpConfFiles/atom/.atom/packages/markdown-writer/lib/helpers/line-meta.coffee
