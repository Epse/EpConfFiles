(function() {
  var LinterRust, errorModes, linter;

  errorModes = require('../lib/mode');

  LinterRust = require('../lib/linter-rust');

  linter = new LinterRust();

  describe("errorModes::OLD_RUSTC::parse", function() {
    it("should return 0 messages for an empty string", function() {
      return expect(errorModes.OLD_RUSTC.parse('', {})).toEqual([]);
    });
    it("should properly parse one line error message", function() {
      return expect(errorModes.OLD_RUSTC.parse('my/awesome file.rs:1:2: 3:4 error: my awesome text\n', {})).toEqual([
        {
          type: 'Error',
          text: 'my awesome text',
          filePath: 'my/awesome file.rs',
          range: [[0, 1], [2, 3]]
        }
      ]);
    });
    it("should properly parse one line warning message", function() {
      return expect(errorModes.OLD_RUSTC.parse('foo:33:44: 22:33 warning: äüö<>\n', {})).toEqual([
        {
          type: 'Warning',
          text: 'äüö<>',
          filePath: 'foo',
          range: [[32, 43], [21, 32]]
        }
      ]);
    });
    it("should return messages with a range of at least one character", function() {
      var editor;
      editor = atom.workspace.buildTextEditor();
      editor.setText('fn main() {\nprintln!("Hi test");}\n');
      expect(errorModes.OLD_RUSTC.parse('foo:1:1: 1:1 error: text\n', {
        textEditor: editor
      })).toEqual([
        {
          type: 'Error',
          text: 'text',
          filePath: 'foo',
          range: [[0, 0], [0, 2]]
        }
      ]);
      return expect(errorModes.OLD_RUSTC.parse('foo:2:1: 2:1 error: text\n', {
        textEditor: editor
      })).toEqual([
        {
          type: 'Error',
          text: 'text',
          filePath: 'foo',
          range: [[1, 0], [1, 7]]
        }
      ]);
    });
    it("should properly parse multiline messages", function() {
      expect(errorModes.OLD_RUSTC.parse('bar:1:2: 3:4 error: line one\ntwo\n', {})).toEqual([
        {
          type: 'Error',
          text: 'line one\ntwo',
          filePath: 'bar',
          range: [[0, 1], [2, 3]]
        }
      ]);
      expect(errorModes.OLD_RUSTC.parse('bar:1:2: 3:4 error: line one\ntwo\nfoo:1:1: 1:2 warning: simple line\n', {})).toEqual([
        {
          type: 'Error',
          text: 'line one\ntwo',
          filePath: 'bar',
          range: [[0, 1], [2, 3]]
        }, {
          type: 'Warning',
          text: 'simple line',
          filePath: 'foo',
          range: [[0, 0], [0, 1]]
        }
      ]);
      return expect(errorModes.OLD_RUSTC.parse('bar:1:2: 3:4 error: line one\ntwo\nthree\nfoo:1   shouldnt match', {})).toEqual([
        {
          type: 'Error',
          text: 'line one\ntwo\nthree',
          filePath: 'bar',
          range: [[0, 1], [2, 3]]
        }
      ]);
    });
    it("should also cope with windows line breaks", function() {
      var multi;
      expect(errorModes.OLD_RUSTC.parse('a:1:2: 3:4 error: a\r\nb\n', {})[0].text).toEqual('a\r\nb');
      multi = errorModes.OLD_RUSTC.parse('a:1:2: 3:4 error: a\n\rb\n\rx:1:2: 3:4 error: asd\r\n', {});
      expect(multi[0].text).toEqual('a\n\rb');
      return expect(multi[1].text).toEqual('asd');
    });
    return it("should not throw an error with extra whitespace in paths", function() {
      var buildLinterWithWhitespacePath, resetPath;
      buildLinterWithWhitespacePath = function() {
        atom.config.set("linter-rust.rustc", "rustc\n");
        atom.config.set("linter-rust.cargo", "cargo\n");
        return new LinterRust();
      };
      resetPath = function() {
        atom.config.set("linter-rust.rustc", "rustc");
        return atom.config.set("linter-rust.cargo", "cargo");
      };
      expect(buildLinterWithWhitespacePath).not.toThrow();
      return resetPath();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
