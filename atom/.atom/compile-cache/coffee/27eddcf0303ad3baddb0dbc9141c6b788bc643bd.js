(function() {
  var classes, constr, funct, strange, truefalse, types;

  classes = ['Applicative', 'Bounded', 'Enum', 'Eq', 'Floating', 'Foldable', 'Fractional', 'Functor', 'Integral', 'Monad', 'Monoid', 'Num', 'Ord', 'Read', 'Real', 'RealFloat', 'RealFrac', 'Show', 'Traversable'];

  funct = ['abs', 'acos', 'acosh', 'all', 'and', 'any', 'appendFile', 'asTypeOf', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'break', 'ceiling', 'compare', 'concat', 'concatMap', 'const', 'cos', 'cosh', 'curry', 'cycle', 'decodeFloat', 'div', 'divMod', 'drop', 'dropWhile', 'either', 'elem', 'encodeFloat', 'enumFrom', 'enumFromThen', 'enumFromThenTo', 'enumFromTo', 'error', 'even', 'exp', 'exponent', 'fail', 'filter', 'flip', 'floatDigits', 'floatRadix', 'floatRange', 'floor', 'fmap', 'foldMap', 'foldl', 'foldl1', 'foldr', 'foldr1', 'fromEnum', 'fromInteger', 'fromIntegral', 'fromRational', 'fst', 'gcd', 'getChar', 'getContents', 'getLine', 'head', 'id', 'init', 'interact', 'ioError', 'isDenormalized', 'isIEEE', 'isInfinite', 'isNaN', 'isNegativeZero', 'iterate', 'last', 'lcm', 'length', 'lex', 'lines', 'log', 'logBase', 'lookup', 'map', 'mapM', 'mapM_', 'mappend', 'max', 'maxBound', 'maximum', 'maybe', 'mconcat', 'mempty', 'min', 'minBound', 'minimum', 'mod', 'negate', 'not', 'notElem', 'null', 'odd', 'or', 'otherwise', 'pi', 'pred', 'print', 'product', 'properFraction', 'pure', 'putChar', 'putStr', 'putStrLn', 'quot', 'quotRem', 'read', 'readFile', 'readIO', 'readList', 'readLn', 'readParen', 'reads', 'readsPrec', 'realToFrac', 'recip', 'rem', 'repeat', 'replicate', 'return', 'reverse', 'round', 'scaleFloat', 'scanl', 'scanl1', 'scanr', 'scanr1', 'seq', 'sequence', 'sequenceA', 'sequence_', 'show', 'showChar', 'showList', 'showParen', 'showString', 'shows', 'showsPrec', 'significand', 'signum', 'sin', 'sinh', 'snd', 'span', 'splitAt', 'sqrt', 'subtract', 'succ', 'sum', 'tail', 'take', 'takeWhile', 'tan', 'tanh', 'toEnum', 'toInteger', 'toRational', 'traverse', 'truncate', 'uncurry', 'undefined', 'unlines', 'until', 'unwords', 'unzip', 'unzip3', 'userError', 'words', 'writeFile', 'zip', 'zip3', 'zipWith', 'zipWith3'];

  constr = ['EQ', 'GT', 'Just', 'LT', 'Left', 'Nothing', 'Right'];

  types = ['Either', 'FilePath', 'IO', 'IOError', 'Integer', 'Maybe', 'Ordering', 'Rational', 'ReadS', 'ShowS', 'String'];

  strange = ['Bool', 'Char', 'Double', 'Float', 'Int', 'Word'];

  truefalse = ['True', 'False'];

  constr.push.apply(constr, truefalse);

  types.push.apply(types, strange);

  module.exports = {
    classes: classes,
    funct: funct,
    constr: constr,
    types: types
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvZXBzZS8uYXRvbS9wYWNrYWdlcy9sYW5ndWFnZS1oYXNrZWxsL3NyYy9wcmVsdWRlLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxpREFBQTs7QUFBQSxFQUFBLE9BQUEsR0FBVSxDQUNOLGFBRE0sRUFFTixTQUZNLEVBR04sTUFITSxFQUlOLElBSk0sRUFLTixVQUxNLEVBTU4sVUFOTSxFQU9OLFlBUE0sRUFRTixTQVJNLEVBU04sVUFUTSxFQVVOLE9BVk0sRUFXTixRQVhNLEVBWU4sS0FaTSxFQWFOLEtBYk0sRUFjTixNQWRNLEVBZU4sTUFmTSxFQWdCTixXQWhCTSxFQWlCTixVQWpCTSxFQWtCTixNQWxCTSxFQW1CTixhQW5CTSxDQUFWLENBQUE7O0FBQUEsRUFxQkEsS0FBQSxHQUFRLENBQ0osS0FESSxFQUVKLE1BRkksRUFHSixPQUhJLEVBSUosS0FKSSxFQUtKLEtBTEksRUFNSixLQU5JLEVBT0osWUFQSSxFQVFKLFVBUkksRUFTSixNQVRJLEVBVUosT0FWSSxFQVdKLE1BWEksRUFZSixPQVpJLEVBYUosT0FiSSxFQWNKLE9BZEksRUFlSixTQWZJLEVBZ0JKLFNBaEJJLEVBaUJKLFFBakJJLEVBa0JKLFdBbEJJLEVBbUJKLE9BbkJJLEVBb0JKLEtBcEJJLEVBcUJKLE1BckJJLEVBc0JKLE9BdEJJLEVBdUJKLE9BdkJJLEVBd0JKLGFBeEJJLEVBeUJKLEtBekJJLEVBMEJKLFFBMUJJLEVBMkJKLE1BM0JJLEVBNEJKLFdBNUJJLEVBNkJKLFFBN0JJLEVBOEJKLE1BOUJJLEVBK0JKLGFBL0JJLEVBZ0NKLFVBaENJLEVBaUNKLGNBakNJLEVBa0NKLGdCQWxDSSxFQW1DSixZQW5DSSxFQW9DSixPQXBDSSxFQXFDSixNQXJDSSxFQXNDSixLQXRDSSxFQXVDSixVQXZDSSxFQXdDSixNQXhDSSxFQXlDSixRQXpDSSxFQTBDSixNQTFDSSxFQTJDSixhQTNDSSxFQTRDSixZQTVDSSxFQTZDSixZQTdDSSxFQThDSixPQTlDSSxFQStDSixNQS9DSSxFQWdESixTQWhESSxFQWlESixPQWpESSxFQWtESixRQWxESSxFQW1ESixPQW5ESSxFQW9ESixRQXBESSxFQXFESixVQXJESSxFQXNESixhQXRESSxFQXVESixjQXZESSxFQXdESixjQXhESSxFQXlESixLQXpESSxFQTBESixLQTFESSxFQTJESixTQTNESSxFQTRESixhQTVESSxFQTZESixTQTdESSxFQThESixNQTlESSxFQStESixJQS9ESSxFQWdFSixNQWhFSSxFQWlFSixVQWpFSSxFQWtFSixTQWxFSSxFQW1FSixnQkFuRUksRUFvRUosUUFwRUksRUFxRUosWUFyRUksRUFzRUosT0F0RUksRUF1RUosZ0JBdkVJLEVBd0VKLFNBeEVJLEVBeUVKLE1BekVJLEVBMEVKLEtBMUVJLEVBMkVKLFFBM0VJLEVBNEVKLEtBNUVJLEVBNkVKLE9BN0VJLEVBOEVKLEtBOUVJLEVBK0VKLFNBL0VJLEVBZ0ZKLFFBaEZJLEVBaUZKLEtBakZJLEVBa0ZKLE1BbEZJLEVBbUZKLE9BbkZJLEVBb0ZKLFNBcEZJLEVBcUZKLEtBckZJLEVBc0ZKLFVBdEZJLEVBdUZKLFNBdkZJLEVBd0ZKLE9BeEZJLEVBeUZKLFNBekZJLEVBMEZKLFFBMUZJLEVBMkZKLEtBM0ZJLEVBNEZKLFVBNUZJLEVBNkZKLFNBN0ZJLEVBOEZKLEtBOUZJLEVBK0ZKLFFBL0ZJLEVBZ0dKLEtBaEdJLEVBaUdKLFNBakdJLEVBa0dKLE1BbEdJLEVBbUdKLEtBbkdJLEVBb0dKLElBcEdJLEVBcUdKLFdBckdJLEVBc0dKLElBdEdJLEVBdUdKLE1BdkdJLEVBd0dKLE9BeEdJLEVBeUdKLFNBekdJLEVBMEdKLGdCQTFHSSxFQTJHSixNQTNHSSxFQTRHSixTQTVHSSxFQTZHSixRQTdHSSxFQThHSixVQTlHSSxFQStHSixNQS9HSSxFQWdISixTQWhISSxFQWlISixNQWpISSxFQWtISixVQWxISSxFQW1ISixRQW5ISSxFQW9ISixVQXBISSxFQXFISixRQXJISSxFQXNISixXQXRISSxFQXVISixPQXZISSxFQXdISixXQXhISSxFQXlISixZQXpISSxFQTBISixPQTFISSxFQTJISixLQTNISSxFQTRISixRQTVISSxFQTZISixXQTdISSxFQThISixRQTlISSxFQStISixTQS9ISSxFQWdJSixPQWhJSSxFQWlJSixZQWpJSSxFQWtJSixPQWxJSSxFQW1JSixRQW5JSSxFQW9JSixPQXBJSSxFQXFJSixRQXJJSSxFQXNJSixLQXRJSSxFQXVJSixVQXZJSSxFQXdJSixXQXhJSSxFQXlJSixXQXpJSSxFQTBJSixNQTFJSSxFQTJJSixVQTNJSSxFQTRJSixVQTVJSSxFQTZJSixXQTdJSSxFQThJSixZQTlJSSxFQStJSixPQS9JSSxFQWdKSixXQWhKSSxFQWlKSixhQWpKSSxFQWtKSixRQWxKSSxFQW1KSixLQW5KSSxFQW9KSixNQXBKSSxFQXFKSixLQXJKSSxFQXNKSixNQXRKSSxFQXVKSixTQXZKSSxFQXdKSixNQXhKSSxFQXlKSixVQXpKSSxFQTBKSixNQTFKSSxFQTJKSixLQTNKSSxFQTRKSixNQTVKSSxFQTZKSixNQTdKSSxFQThKSixXQTlKSSxFQStKSixLQS9KSSxFQWdLSixNQWhLSSxFQWlLSixRQWpLSSxFQWtLSixXQWxLSSxFQW1LSixZQW5LSSxFQW9LSixVQXBLSSxFQXFLSixVQXJLSSxFQXNLSixTQXRLSSxFQXVLSixXQXZLSSxFQXdLSixTQXhLSSxFQXlLSixPQXpLSSxFQTBLSixTQTFLSSxFQTJLSixPQTNLSSxFQTRLSixRQTVLSSxFQTZLSixXQTdLSSxFQThLSixPQTlLSSxFQStLSixXQS9LSSxFQWdMSixLQWhMSSxFQWlMSixNQWpMSSxFQWtMSixTQWxMSSxFQW1MSixVQW5MSSxDQXJCUixDQUFBOztBQUFBLEVBME1BLE1BQUEsR0FBUyxDQUNMLElBREssRUFFTCxJQUZLLEVBR0wsTUFISyxFQUlMLElBSkssRUFLTCxNQUxLLEVBTUwsU0FOSyxFQU9MLE9BUEssQ0ExTVQsQ0FBQTs7QUFBQSxFQW1OQSxLQUFBLEdBQVEsQ0FDSixRQURJLEVBRUosVUFGSSxFQUdKLElBSEksRUFJSixTQUpJLEVBS0osU0FMSSxFQU1KLE9BTkksRUFPSixVQVBJLEVBUUosVUFSSSxFQVNKLE9BVEksRUFVSixPQVZJLEVBV0osUUFYSSxDQW5OUixDQUFBOztBQUFBLEVBZ09BLE9BQUEsR0FBVSxDQUNOLE1BRE0sRUFFTixNQUZNLEVBR04sUUFITSxFQUlOLE9BSk0sRUFLTixLQUxNLEVBTU4sTUFOTSxDQWhPVixDQUFBOztBQUFBLEVBd09BLFNBQUEsR0FBWSxDQUFFLE1BQUYsRUFBVSxPQUFWLENBeE9aLENBQUE7O0FBQUEsRUF5T0EsTUFBTSxDQUFDLElBQVAsZUFBWSxTQUFaLENBek9BLENBQUE7O0FBQUEsRUEwT0EsS0FBSyxDQUFDLElBQU4sY0FBVyxPQUFYLENBMU9BLENBQUE7O0FBQUEsRUEyT0EsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUFBQSxJQUFFLFNBQUEsT0FBRjtBQUFBLElBQVcsT0FBQSxLQUFYO0FBQUEsSUFBa0IsUUFBQSxNQUFsQjtBQUFBLElBQTBCLE9BQUEsS0FBMUI7R0EzT2pCLENBQUE7QUFBQSIKfQ==

//# sourceURL=/home/epse/.atom/packages/language-haskell/src/prelude.coffee
