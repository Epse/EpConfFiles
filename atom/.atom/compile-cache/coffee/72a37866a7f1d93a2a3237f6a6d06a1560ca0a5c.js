(function() {
  describe('Record', function() {
    var check, grammar, zip;
    grammar = null;
    zip = function() {
      var arr, i, j, length, lengthArray, ref, results;
      lengthArray = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = arguments.length; j < len; j++) {
          arr = arguments[j];
          results.push(arr.length);
        }
        return results;
      }).apply(this, arguments);
      length = Math.max.apply(Math, lengthArray);
      results = [];
      for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, len, results1;
          results1 = [];
          for (k = 0, len = arguments.length; k < len; k++) {
            arr = arguments[k];
            results1.push(arr[i]);
          }
          return results1;
        }).apply(this, arguments));
      }
      return results;
    };
    check = function(line, exp) {
      var i, j, len, ref, results, t;
      ref = zip(line, exp);
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        t = ref[i];
        if (t[0] == null) {
          t[0] = {};
        }
        if (t[1] == null) {
          t[1] = {};
        }
        t[0].index = i;
        t[1].index = i;
        results.push(expect(t[0]).toEqual(t[1]));
      }
      return results;
    };
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage("language-haskell");
      });
      return runs(function() {
        return grammar = atom.grammars.grammarForScopeName("source.haskell");
      });
    });
    it('understands record syntax', function() {
      var exp, j, l, len, lines, ref, results, string;
      string = "data Car = Car {\n    company :: String,\n    model :: String,\n    year :: Int\n  } deriving (Show)";
      lines = grammar.tokenizeLines(string);
      exp = [
        [
          {
            "value": "data",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "keyword.other.data.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "Car",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.type-signature.haskell", "entity.name.type.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "=",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "keyword.operator.assignment.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "Car",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "entity.name.tag.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "{",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "keyword.operator.record.begin.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell"]
          }, {
            "value": "company",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "entity.other.attribute-name.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell"]
          }, {
            "value": "::",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "keyword.other.double-colon.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "String",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", 'entity.name.type.haskell', "support.class.prelude.haskell"]
          }, {
            "value": ",",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "model",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "entity.other.attribute-name.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell"]
          }, {
            "value": "::",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "keyword.other.double-colon.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "String",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", 'entity.name.type.haskell', "support.class.prelude.haskell"]
          }, {
            "value": ",",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "year",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "entity.other.attribute-name.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell"]
          }, {
            "value": "::",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "keyword.other.double-colon.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "Int",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", 'entity.name.type.haskell', "support.class.prelude.haskell"]
          }
        ], [
          {
            "value": "  ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "}",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "keyword.operator.record.end.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "deriving",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.deriving.haskell", "keyword.other.haskell"]
          }, {
            "value": " (",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.deriving.haskell"]
          }, {
            "value": "Show",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.deriving.haskell", "entity.other.inherited-class.haskell"]
          }, {
            "value": ")",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.deriving.haskell"]
          }
        ]
      ];
      ref = zip(lines, exp);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        results.push(check(l[0], l[1]));
      }
      return results;
    });
    it("understands comments in records", function() {
      var lines, string;
      string = "data Car = Car {\n    company :: String, -- comment\n    -- model :: String, -- commented field\n    year :: Int -- another comment\n  }";
      lines = grammar.tokenizeLines(string);
      return expect(lines).toEqual([
        [
          {
            "value": "data",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "keyword.other.data.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "Car",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.type-signature.haskell", "entity.name.type.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "=",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "keyword.operator.assignment.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "Car",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "entity.name.tag.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "{",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "keyword.operator.record.begin.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell"]
          }, {
            "value": "company",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "entity.other.attribute-name.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell"]
          }, {
            "value": "::",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "keyword.other.double-colon.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "String",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", 'entity.name.type.haskell', "support.class.prelude.haskell"]
          }, {
            "value": ", ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "--",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell", "punctuation.definition.comment.haskell"]
          }, {
            "value": " comment",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell"]
          }, {
            "value": "",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "--",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell", "punctuation.definition.comment.haskell"]
          }, {
            "value": " model :: String, -- commented field",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell"]
          }, {
            "value": "",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "year",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "entity.other.attribute-name.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell"]
          }, {
            "value": "::",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "keyword.other.double-colon.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "Int",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", 'entity.name.type.haskell', "support.class.prelude.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "--",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell", "punctuation.definition.comment.haskell"]
          }, {
            "value": " another comment",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell"]
          }, {
            "value": "",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", "comment.line.double-dash.haskell"]
          }
        ], [
          {
            "value": "  ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "}",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "keyword.operator.record.end.haskell"]
          }
        ]
      ]);
    });
    return it("understands comments in start of records", function() {
      var lines, string;
      string = "data Car = Car {\n    -- company :: String\n    , model :: String\n  }";
      lines = grammar.tokenizeLines(string);
      return expect(lines).toEqual([
        [
          {
            "value": "data",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "keyword.other.data.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "Car",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.type-signature.haskell", "entity.name.type.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "=",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "keyword.operator.assignment.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "Car",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "entity.name.tag.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell"]
          }, {
            "value": "{",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "keyword.operator.record.begin.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell"]
          }, {
            "value": "--",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "comment.line.double-dash.haskell", "punctuation.definition.comment.haskell"]
          }, {
            "value": " company :: String",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "comment.line.double-dash.haskell"]
          }, {
            "value": "",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "comment.line.double-dash.haskell"]
          }
        ], [
          {
            "value": "    ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell"]
          }, {
            "value": ",",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "punctuation.separator.comma.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell"]
          }, {
            "value": "model",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "entity.other.attribute-name.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell"]
          }, {
            "value": "::",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "keyword.other.double-colon.haskell"]
          }, {
            "value": " ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "String",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell", 'entity.name.type.haskell', "support.class.prelude.haskell"]
          }
        ], [
          {
            "value": "  ",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "meta.record-field.type-declaration.haskell", "meta.type-signature.haskell"]
          }, {
            "value": "}",
            "scopes": ["source.haskell", "meta.declaration.type.data.haskell", "meta.declaration.type.data.record.block.haskell", "keyword.operator.record.end.haskell"]
          }
        ]
      ]);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
