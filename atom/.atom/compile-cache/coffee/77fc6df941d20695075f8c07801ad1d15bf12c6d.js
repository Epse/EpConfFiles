(function() {
  var LineMeta;

  LineMeta = require("../../lib/helpers/line-meta");

  describe("LineMeta", function() {
    describe(".isList", function() {
      it("is not list", function() {
        return expect(LineMeta.isList("normal line")).toBe(false);
      });
      it("is not list, blockquote", function() {
        return expect(LineMeta.isList("> blockquote")).toBe(false);
      });
      it("is unordered list", function() {
        return expect(LineMeta.isList("- list")).toBe(true);
      });
      it("is unordered task list", function() {
        return expect(LineMeta.isList("- [ ]list")).toBe(true);
      });
      it("is unordered task list", function() {
        return expect(LineMeta.isList("- [ ] list")).toBe(true);
      });
      it("is ordered list", function() {
        return expect(LineMeta.isList("12. list")).toBe(true);
      });
      it("is ordered task list", function() {
        return expect(LineMeta.isList("12. [ ]list")).toBe(true);
      });
      it("is ordered task list", function() {
        return expect(LineMeta.isList("12. [ ] list")).toBe(true);
      });
      it("is alpha ordered list", function() {
        return expect(LineMeta.isList("aa. list")).toBe(true);
      });
      it("is alpha ordered task list", function() {
        return expect(LineMeta.isList("aaz. [ ]list")).toBe(true);
      });
      return it("is alpha ordered task list", function() {
        return expect(LineMeta.isList("A. [ ]list")).toBe(true);
      });
    });
    describe("normal line", function() {
      return it("is not continuous", function() {
        return expect(new LineMeta("normal line").isContinuous()).toBe(false);
      });
    });
    describe("unordered task list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("- [X] line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is ul list", function() {
        return expect(lineMeta.isList("ul")).toBe(true);
      });
      it("is not ol list", function() {
        return expect(lineMeta.isList("ol")).toBe(false);
      });
      it("is task list", function() {
        return expect(lineMeta.isTaskList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("-");
      });
      it("had default head", function() {
        return expect(lineMeta.defaultHead).toBe("-");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("- [ ] ");
      });
    });
    describe("unordered list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("- line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("-");
      });
      it("had default head", function() {
        return expect(lineMeta.defaultHead).toBe("-");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("- ");
      });
    });
    describe("ordered task list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("99. [X] line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is ol list", function() {
        return expect(lineMeta.isList("ol")).toBe(true);
      });
      it("is not ul list", function() {
        return expect(lineMeta.isList("ul")).toBe(false);
      });
      it("is task list", function() {
        return expect(lineMeta.isTaskList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("99");
      });
      it("had default head", function() {
        return expect(lineMeta.defaultHead).toBe("1");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("100. [ ] ");
      });
    });
    describe("ordered list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("3. line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("3");
      });
      it("had default head", function() {
        return expect(lineMeta.defaultHead).toBe("1");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("4. ");
      });
    });
    describe("ordered alpha list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("a. line");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("line");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("a");
      });
      it("had default head", function() {
        return expect(lineMeta.defaultHead).toBe("a");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("b. ");
      });
    });
    describe("empty list line", function() {
      var lineMeta;
      lineMeta = new LineMeta("3.     ");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(true);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(true);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe("3");
      });
      it("had default head", function() {
        return expect(lineMeta.defaultHead).toBe("1");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("4. ");
      });
    });
    return describe("blockquote", function() {
      var lineMeta;
      lineMeta = new LineMeta("  > blockquote");
      it("is list", function() {
        return expect(lineMeta.isList()).toBe(false);
      });
      it("is continuous", function() {
        return expect(lineMeta.isContinuous()).toBe(true);
      });
      it("is not empty body", function() {
        return expect(lineMeta.isEmptyBody()).toBe(false);
      });
      it("has body", function() {
        return expect(lineMeta.body).toBe("blockquote");
      });
      it("has head", function() {
        return expect(lineMeta.head).toBe(">");
      });
      it("had default head", function() {
        return expect(lineMeta.defaultHead).toBe(">");
      });
      return it("has nextLine", function() {
        return expect(lineMeta.nextLine).toBe("  > ");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvZXBzZS9FcENvbmZGaWxlcy9hdG9tLy5hdG9tL3BhY2thZ2VzL21hcmtkb3duLXdyaXRlci9zcGVjL2hlbHBlcnMvbGluZS1tZXRhLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxRQUFBLEdBQVcsT0FBQSxDQUFRLDZCQUFSOztFQUVYLFFBQUEsQ0FBUyxVQUFULEVBQXFCLFNBQUE7SUFFbkIsUUFBQSxDQUFTLFNBQVQsRUFBb0IsU0FBQTtNQUNsQixFQUFBLENBQUcsYUFBSCxFQUFrQixTQUFBO2VBQUcsTUFBQSxDQUFPLFFBQVEsQ0FBQyxNQUFULENBQWdCLGFBQWhCLENBQVAsQ0FBc0MsQ0FBQyxJQUF2QyxDQUE0QyxLQUE1QztNQUFILENBQWxCO01BQ0EsRUFBQSxDQUFHLHlCQUFILEVBQThCLFNBQUE7ZUFBRyxNQUFBLENBQU8sUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsY0FBaEIsQ0FBUCxDQUF1QyxDQUFDLElBQXhDLENBQTZDLEtBQTdDO01BQUgsQ0FBOUI7TUFDQSxFQUFBLENBQUcsbUJBQUgsRUFBd0IsU0FBQTtlQUFHLE1BQUEsQ0FBTyxRQUFRLENBQUMsTUFBVCxDQUFnQixRQUFoQixDQUFQLENBQWlDLENBQUMsSUFBbEMsQ0FBdUMsSUFBdkM7TUFBSCxDQUF4QjtNQUNBLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFBO2VBQUcsTUFBQSxDQUFPLFFBQVEsQ0FBQyxNQUFULENBQWdCLFdBQWhCLENBQVAsQ0FBb0MsQ0FBQyxJQUFyQyxDQUEwQyxJQUExQztNQUFILENBQTdCO01BQ0EsRUFBQSxDQUFHLHdCQUFILEVBQTZCLFNBQUE7ZUFBRyxNQUFBLENBQU8sUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsWUFBaEIsQ0FBUCxDQUFxQyxDQUFDLElBQXRDLENBQTJDLElBQTNDO01BQUgsQ0FBN0I7TUFDQSxFQUFBLENBQUcsaUJBQUgsRUFB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USxDQUFDLFdBQWhCLENBQTRCLENBQUMsSUFBN0IsQ0FBa0MsR0FBbEM7TUFBSCxDQUF2QjthQUNBLEVBQUEsQ0FBRyxjQUFILEVBQW1CLFNBQUE7ZUFBRyxNQUFBLENBQU8sUUFBUSxDQUFDLFFBQWhCLENBQXlCLENBQUMsSUFBMUIsQ0FBK0IsTUFBL0I7TUFBSCxDQUFuQjtJQVRxQixDQUF2QjtFQTVGbUIsQ0FBckI7QUFGQSIsInNvdXJjZXNDb250ZW50IjpbIkxpbmVNZXRhID0gcmVxdWlyZSBcIi4uLy4uL2xpYi9oZWxwZXJzL2xpbmUtbWV0YVwiXG5cbmRlc2NyaWJlIFwiTGluZU1ldGFcIiwgLT5cbiAgIyBzdGF0aWMgbWV0aG9kc1xuICBkZXNjcmliZSBcIi5pc0xpc3RcIiwgLT5cbiAgICBpdCBcImlzIG5vdCBsaXN0XCIsIC0+IGV4cGVjdChMaW5lTWV0YS5pc0xpc3QoXCJub3JtYWwgbGluZVwiKSkudG9CZShmYWxzZSlcbiAgICBpdCBcImlzIG5vdCBsaXN0LCBibG9ja3F1b3RlXCIsIC0+IGV4cGVjdChMaW5lTWV0YS5pc0xpc3QoXCI+IGJsb2NrcXVvdGVcIikpLnRvQmUoZmFsc2UpXG4gICAgaXQgXCJpcyB1bm9yZGVyZWQgbGlzdFwiLCAtPiBleHBlY3QoTGluZU1ldGEuaXNMaXN0KFwiLSBsaXN0XCIpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyB1bm9yZGVyZWQgdGFzayBsaXN0XCIsIC0+IGV4cGVjdChMaW5lTWV0YS5pc0xpc3QoXCItIFsgXWxpc3RcIikpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIHVub3JkZXJlZCB0YXNrIGxpc3RcIiwgLT4gZXhwZWN0KExpbmVNZXRhLmlzTGlzdChcIi0gWyBdIGxpc3RcIikpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIG9yZGVyZWQgbGlzdFwiLCAtPiBleHBlY3QoTGluZU1ldGEuaXNMaXN0KFwiMTIuIGxpc3RcIikpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIG9yZGVyZWQgdGFzayBsaXN0XCIsIC0+IGV4cGVjdChMaW5lTWV0YS5pc0xpc3QoXCIxMi4gWyBdbGlzdFwiKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgb3JkZXJlZCB0YXNrIGxpc3RcIiwgLT4gZXhwZWN0KExpbmVNZXRhLmlzTGlzdChcIjEyLiBbIF0gbGlzdFwiKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgYWxwaGEgb3JkZXJlZCBsaXN0XCIsIC0+IGV4cGVjdChMaW5lTWV0YS5pc0xpc3QoXCJhYS4gbGlzdFwiKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgYWxwaGEgb3JkZXJlZCB0YXNrIGxpc3RcIiwgLT4gZXhwZWN0KExpbmVNZXRhLmlzTGlzdChcImFhei4gWyBdbGlzdFwiKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgYWxwaGEgb3JkZXJlZCB0YXNrIGxpc3RcIiwgLT4gZXhwZWN0KExpbmVNZXRhLmlzTGlzdChcIkEuIFsgXWxpc3RcIikpLnRvQmUodHJ1ZSlcblxuICAjIGluc3RhbmNlXG4gIGRlc2NyaWJlIFwibm9ybWFsIGxpbmVcIiwgLT5cbiAgICBpdCBcImlzIG5vdCBjb250aW51b3VzXCIsIC0+XG4gICAgICBleHBlY3QobmV3IExpbmVNZXRhKFwibm9ybWFsIGxpbmVcIikuaXNDb250aW51b3VzKCkpLnRvQmUoZmFsc2UpXG5cbiAgZGVzY3JpYmUgXCJ1bm9yZGVyZWQgdGFzayBsaXN0IGxpbmVcIiwgLT5cbiAgICBsaW5lTWV0YSA9IG5ldyBMaW5lTWV0YShcIi0gW1hdIGxpbmVcIilcblxuICAgIGl0IFwiaXMgbGlzdFwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNMaXN0KCkpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIHVsIGxpc3RcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzTGlzdChcInVsXCIpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyBub3Qgb2wgbGlzdFwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNMaXN0KFwib2xcIikpLnRvQmUoZmFsc2UpXG4gICAgaXQgXCJpcyB0YXNrIGxpc3RcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzVGFza0xpc3QoKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgY29udGludW91c1wiLCAtPiBleHBlY3QobGluZU1ldGEuaXNDb250aW51b3VzKCkpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIG5vdCBlbXB0eSBib2R5XCIsIC0+IGV4cGVjdChsaW5lTWV0YS5pc0VtcHR5Qm9keSgpKS50b0JlKGZhbHNlKVxuICAgIGl0IFwiaGFzIGJvZHlcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmJvZHkpLnRvQmUoXCJsaW5lXCIpXG4gICAgaXQgXCJoYXMgaGVhZFwiLCAtPiBleHBlY3QobGluZU1ldGEuaGVhZCkudG9CZShcIi1cIilcbiAgICBpdCBcImhhZCBkZWZhdWx0IGhlYWRcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmRlZmF1bHRIZWFkKS50b0JlKFwiLVwiKVxuICAgIGl0IFwiaGFzIG5leHRMaW5lXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5uZXh0TGluZSkudG9CZShcIi0gWyBdIFwiKVxuXG4gIGRlc2NyaWJlIFwidW5vcmRlcmVkIGxpc3QgbGluZVwiLCAtPlxuICAgIGxpbmVNZXRhID0gbmV3IExpbmVNZXRhKFwiLSBsaW5lXCIpXG5cbiAgICBpdCBcImlzIGxpc3RcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzTGlzdCgpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyBjb250aW51b3VzXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5pc0NvbnRpbnVvdXMoKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgbm90IGVtcHR5IGJvZHlcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzRW1wdHlCb2R5KCkpLnRvQmUoZmFsc2UpXG4gICAgaXQgXCJoYXMgYm9keVwiLCAtPiBleHBlY3QobGluZU1ldGEuYm9keSkudG9CZShcImxpbmVcIilcbiAgICBpdCBcImhhcyBoZWFkXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5oZWFkKS50b0JlKFwiLVwiKVxuICAgIGl0IFwiaGFkIGRlZmF1bHQgaGVhZFwiLCAtPiBleHBlY3QobGluZU1ldGEuZGVmYXVsdEhlYWQpLnRvQmUoXCItXCIpXG4gICAgaXQgXCJoYXMgbmV4dExpbmVcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLm5leHRMaW5lKS50b0JlKFwiLSBcIilcblxuICBkZXNjcmliZSBcIm9yZGVyZWQgdGFzayBsaXN0IGxpbmVcIiwgLT5cbiAgICBsaW5lTWV0YSA9IG5ldyBMaW5lTWV0YShcIjk5LiBbWF0gbGluZVwiKVxuXG4gICAgaXQgXCJpcyBsaXN0XCIsIC0+IGV4cGVjdChsaW5lTWV0YS5pc0xpc3QoKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgb2wgbGlzdFwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNMaXN0KFwib2xcIikpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIG5vdCB1bCBsaXN0XCIsIC0+IGV4cGVjdChsaW5lTWV0YS5pc0xpc3QoXCJ1bFwiKSkudG9CZShmYWxzZSlcbiAgICBpdCBcImlzIHRhc2sgbGlzdFwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNUYXNrTGlzdCgpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyBjb250aW51b3VzXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5pc0NvbnRpbnVvdXMoKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgbm90IGVtcHR5IGJvZHlcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzRW1wdHlCb2R5KCkpLnRvQmUoZmFsc2UpXG4gICAgaXQgXCJoYXMgYm9keVwiLCAtPiBleHBlY3QobGluZU1ldGEuYm9keSkudG9CZShcImxpbmVcIilcbiAgICBpdCBcImhhcyBoZWFkXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5oZWFkKS50b0JlKFwiOTlcIilcbiAgICBpdCBcImhhZCBkZWZhdWx0IGhlYWRcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmRlZmF1bHRIZWFkKS50b0JlKFwiMVwiKVxuICAgIGl0IFwiaGFzIG5leHRMaW5lXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5uZXh0TGluZSkudG9CZShcIjEwMC4gWyBdIFwiKVxuXG4gIGRlc2NyaWJlIFwib3JkZXJlZCBsaXN0IGxpbmVcIiwgLT5cbiAgICBsaW5lTWV0YSA9IG5ldyBMaW5lTWV0YShcIjMuIGxpbmVcIilcblxuICAgIGl0IFwiaXMgbGlzdFwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNMaXN0KCkpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIGNvbnRpbnVvdXNcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzQ29udGludW91cygpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyBub3QgZW1wdHkgYm9keVwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNFbXB0eUJvZHkoKSkudG9CZShmYWxzZSlcbiAgICBpdCBcImhhcyBib2R5XCIsIC0+IGV4cGVjdChsaW5lTWV0YS5ib2R5KS50b0JlKFwibGluZVwiKVxuICAgIGl0IFwiaGFzIGhlYWRcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmhlYWQpLnRvQmUoXCIzXCIpXG4gICAgaXQgXCJoYWQgZGVmYXVsdCBoZWFkXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5kZWZhdWx0SGVhZCkudG9CZShcIjFcIilcbiAgICBpdCBcImhhcyBuZXh0TGluZVwiLCAtPiBleHBlY3QobGluZU1ldGEubmV4dExpbmUpLnRvQmUoXCI0LiBcIilcblxuICBkZXNjcmliZSBcIm9yZGVyZWQgYWxwaGEgbGlzdCBsaW5lXCIsIC0+XG4gICAgbGluZU1ldGEgPSBuZXcgTGluZU1ldGEoXCJhLiBsaW5lXCIpXG5cbiAgICBpdCBcImlzIGxpc3RcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzTGlzdCgpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyBjb250aW51b3VzXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5pc0NvbnRpbnVvdXMoKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaXMgbm90IGVtcHR5IGJvZHlcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzRW1wdHlCb2R5KCkpLnRvQmUoZmFsc2UpXG4gICAgaXQgXCJoYXMgYm9keVwiLCAtPiBleHBlY3QobGluZU1ldGEuYm9keSkudG9CZShcImxpbmVcIilcbiAgICBpdCBcImhhcyBoZWFkXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5oZWFkKS50b0JlKFwiYVwiKVxuICAgIGl0IFwiaGFkIGRlZmF1bHQgaGVhZFwiLCAtPiBleHBlY3QobGluZU1ldGEuZGVmYXVsdEhlYWQpLnRvQmUoXCJhXCIpXG4gICAgaXQgXCJoYXMgbmV4dExpbmVcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLm5leHRMaW5lKS50b0JlKFwiYi4gXCIpXG5cbiAgZGVzY3JpYmUgXCJlbXB0eSBsaXN0IGxpbmVcIiwgLT5cbiAgICBsaW5lTWV0YSA9IG5ldyBMaW5lTWV0YShcIjMuICAgICBcIilcblxuICAgIGl0IFwiaXMgbGlzdFwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNMaXN0KCkpLnRvQmUodHJ1ZSlcbiAgICBpdCBcImlzIGNvbnRpbnVvdXNcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzQ29udGludW91cygpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyBub3QgZW1wdHkgYm9keVwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNFbXB0eUJvZHkoKSkudG9CZSh0cnVlKVxuICAgIGl0IFwiaGFzIGJvZHlcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmJvZHkpLnRvQmUoXCJcIilcbiAgICBpdCBcImhhcyBoZWFkXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5oZWFkKS50b0JlKFwiM1wiKVxuICAgIGl0IFwiaGFkIGRlZmF1bHQgaGVhZFwiLCAtPiBleHBlY3QobGluZU1ldGEuZGVmYXVsdEhlYWQpLnRvQmUoXCIxXCIpXG4gICAgaXQgXCJoYXMgbmV4dExpbmVcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLm5leHRMaW5lKS50b0JlKFwiNC4gXCIpXG5cbiAgZGVzY3JpYmUgXCJibG9ja3F1b3RlXCIsIC0+XG4gICAgbGluZU1ldGEgPSBuZXcgTGluZU1ldGEoXCIgID4gYmxvY2txdW90ZVwiKVxuXG4gICAgaXQgXCJpcyBsaXN0XCIsIC0+IGV4cGVjdChsaW5lTWV0YS5pc0xpc3QoKSkudG9CZShmYWxzZSlcbiAgICBpdCBcImlzIGNvbnRpbnVvdXNcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmlzQ29udGludW91cygpKS50b0JlKHRydWUpXG4gICAgaXQgXCJpcyBub3QgZW1wdHkgYm9keVwiLCAtPiBleHBlY3QobGluZU1ldGEuaXNFbXB0eUJvZHkoKSkudG9CZShmYWxzZSlcbiAgICBpdCBcImhhcyBib2R5XCIsIC0+IGV4cGVjdChsaW5lTWV0YS5ib2R5KS50b0JlKFwiYmxvY2txdW90ZVwiKVxuICAgIGl0IFwiaGFzIGhlYWRcIiwgLT4gZXhwZWN0KGxpbmVNZXRhLmhlYWQpLnRvQmUoXCI+XCIpXG4gICAgaXQgXCJoYWQgZGVmYXVsdCBoZWFkXCIsIC0+IGV4cGVjdChsaW5lTWV0YS5kZWZhdWx0SGVhZCkudG9CZShcIj5cIilcbiAgICBpdCBcImhhcyBuZXh0TGluZVwiLCAtPiBleHBlY3QobGluZU1ldGEubmV4dExpbmUpLnRvQmUoXCIgID4gXCIpXG4iXX0=
