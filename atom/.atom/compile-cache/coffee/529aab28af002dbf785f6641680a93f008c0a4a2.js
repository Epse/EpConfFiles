(function() {
  var classes, constr, funct, types;

  classes = ["Applicative", "Bounded", "Enum", "Eq", "Floating", "Foldable", "Fractional", "Functor", "Integral", "Monad", "Monoid", "Num", "Ord", "Read", "Real", "RealFloat", "RealFrac", "Show", "Traversable"];

  funct = ["abs", "acos", "acosh", "all", "and", "any", "appendFile", "asTypeOf", "asin", "asinh", "atan", "atan2", "atanh", "break", "ceiling", "compare", "concat", "concatMap", "const", "cos", "cosh", "curry", "cycle", "decodeFloat", "div", "divMod", "drop", "dropWhile", "either", "elem", "encodeFloat", "enumFrom", "enumFromThen", "enumFromThenTo", "enumFromTo", "error", "even", "exp", "exponent", "fail", "filter", "flip", "floatDigits", "floatRadix", "floatRange", "floor", "fmap", "foldMap", "foldl", "foldl1", "foldr", "foldr1", "fromEnum", "fromInteger", "fromIntegral", "fromRational", "fst", "gcd", "getChar", "getContents", "getLine", "head", "id", "init", "interact", "ioError", "isDenormalized", "isIEEE", "isInfinite", "isNaN", "isNegativeZero", "iterate", "last", "lcm", "length", "lex", "lines", "log", "logBase", "lookup", "map", "mapM", "mapM_", "mappend", "max", "maxBound", "maximum", "maybe", "mconcat", "mempty", "min", "minBound", "minimum", "mod", "negate", "not", "notElem", "null", "odd", "or", "otherwise", "pi", "pred", "print", "product", "properFraction", "pure", "putChar", "putStr", "putStrLn", "quot", "quotRem", "read", "readFile", "readIO", "readList", "readLn", "readParen", "reads", "readsPrec", "realToFrac", "recip", "rem", "repeat", "replicate", "return", "reverse", "round", "scaleFloat", "scanl", "scanl1", "scanr", "scanr1", "seq", "sequence", "sequenceA", "sequence_", "show", "showChar", "showList", "showParen", "showString", "shows", "showsPrec", "significand", "signum", "sin", "sinh", "snd", "span", "splitAt", "sqrt", "subtract", "succ", "sum", "tail", "take", "takeWhile", "tan", "tanh", "toEnum", "toInteger", "toRational", "traverse", "truncate", "uncurry", "undefined", "unlines", "until", "unwords", "unzip", "unzip3", "userError", "words", "writeFile", "zip", "zip3", "zipWith", "zipWith3"];

  constr = ["EQ", "GT", "Just", "LT", "Left", "Nothing", "Right", "True", "False"];

  types = ["Either", "FilePath", "IO", "IOError", "Integer", "Maybe", "Ordering", "Rational", "ReadS", "ShowS", "String", "Bool", "Char", "Double", "Float", "Int", "Word"];

  module.exports = {
    classes: classes,
    funct: funct,
    constr: constr,
    types: types
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvZXBzZS9FcENvbmZGaWxlcy9hdG9tLy5hdG9tL3BhY2thZ2VzL2xhbmd1YWdlLWhhc2tlbGwvc3JjL2luY2x1ZGUvcHJlbHVkZS5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsNkJBQUE7O0FBQUEsRUFBQSxPQUFBLEdBQVUsQ0FBQyxhQUFELEVBQWUsU0FBZixFQUF5QixNQUF6QixFQUFnQyxJQUFoQyxFQUFxQyxVQUFyQyxFQUFnRCxVQUFoRCxFQUEyRCxZQUEzRCxFQUF3RSxTQUF4RSxFQUFrRixVQUFsRixFQUE2RixPQUE3RixFQUFxRyxRQUFyRyxFQUE4RyxLQUE5RyxFQUFvSCxLQUFwSCxFQUEwSCxNQUExSCxFQUFpSSxNQUFqSSxFQUF3SSxXQUF4SSxFQUFvSixVQUFwSixFQUErSixNQUEvSixFQUFzSyxhQUF0SyxDQUFWLENBQUE7O0FBQUEsRUFDQSxLQUFBLEdBQVEsQ0FBQyxLQUFELEVBQU8sTUFBUCxFQUFjLE9BQWQsRUFBc0IsS0FBdEIsRUFBNEIsS0FBNUIsRUFBa0MsS0FBbEMsRUFBd0MsWUFBeEMsRUFBcUQsVUFBckQsRUFBZ0UsTUFBaEUsRUFBdUUsT0FBdkUsRUFBK0UsTUFBL0UsRUFBc0YsT0FBdEYsRUFBOEYsT0FBOUYsRUFBc0csT0FBdEcsRUFBOEcsU0FBOUcsRUFBd0gsU0FBeEgsRUFBa0ksUUFBbEksRUFBMkksV0FBM0ksRUFBdUosT0FBdkosRUFBK0osS0FBL0osRUFBcUssTUFBckssRUFBNEssT0FBNUssRUFBb0wsT0FBcEwsRUFBNEwsYUFBNUwsRUFBME0sS0FBMU0sRUFBZ04sUUFBaE4sRUFBeU4sTUFBek4sRUFBZ08sV0FBaE8sRUFBNE8sUUFBNU8sRUFBcVAsTUFBclAsRUFBNFAsYUFBNVAsRUFBMFEsVUFBMVEsRUFBcVIsY0FBclIsRUFBb1MsZ0JBQXBTLEVBQXFU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

//# sourceURL=/home/epse/EpConfFiles/atom/.atom/packages/language-haskell/src/include/prelude.coffee
