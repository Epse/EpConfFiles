(function() {
  var customMatchers, grammarExpect, ref;

  ref = require('./util'), grammarExpect = ref.grammarExpect, customMatchers = ref.customMatchers;

  describe("Literate Haskell", function() {
    var grammar;
    grammar = null;
    beforeEach(function() {
      this.addMatchers(customMatchers);
      waitsForPromise(function() {
        return atom.packages.activatePackage("language-haskell");
      });
      return runs(function() {
        return grammar = atom.grammars.grammarForScopeName("text.tex.latex.haskell");
      });
    });
    it("parses the grammar", function() {
      expect(grammar).toBeTruthy();
      return expect(grammar.scopeName).toBe("text.tex.latex.haskell");
    });
    return describe("regression test for 64", function() {
      it("parses inline signatures", function() {
        var g;
        g = grammarExpect(grammar, 'a signature |f::Type| should be contained');
        g.toHaveTokens([['a signature ', '|', 'f', '::', 'Type', '|', ' should be contained']]);
        g.toHaveScopes([['text.tex.latex.haskell']]);
        return g.tokenToHaveScopes([[[1, ['meta.embedded.text.haskell.latex.haskell']], [2, ['meta.embedded.text.haskell.latex.haskell', 'meta.function.type-declaration.haskell']], [3, ['meta.embedded.text.haskell.latex.haskell', 'keyword.other.double-colon.haskell']], [4, ['meta.embedded.text.haskell.latex.haskell', 'meta.type-signature.haskell', 'entity.name.type.haskell']], [5, ['meta.embedded.text.haskell.latex.haskell']]]]);
      });
      it("parses inline signatures with dots", function() {
        var g;
        g = grammarExpect(grammar, 'a signature |f::Type|. should be contained');
        g.toHaveTokens([['a signature ', '|', 'f', '::', 'Type', '|', '. should be contained']]);
        g.toHaveScopes([['text.tex.latex.haskell']]);
        return g.tokenToHaveScopes([[[1, ['meta.embedded.text.haskell.latex.haskell']], [2, ['meta.embedded.text.haskell.latex.haskell', 'meta.function.type-declaration.haskell']], [3, ['meta.embedded.text.haskell.latex.haskell', 'keyword.other.double-colon.haskell']], [4, ['meta.embedded.text.haskell.latex.haskell', 'meta.type-signature.haskell', 'entity.name.type.haskell']], [5, ['meta.embedded.text.haskell.latex.haskell']]]]);
      });
      it("parses inline code with pipes", function() {
        var g;
        g = grammarExpect(grammar, 'a code |type Bool = True || False| should parse correctly');
        g.toHaveTokens([['a code ', '|', 'type', ' ', 'Bool', ' ', '=', ' ', 'True', ' ', '||', ' ', 'False', '|', ' should parse correctly']]);
        g.toHaveScopes([['text.tex.latex.haskell']]);
        return g.tokenToHaveScopes([[[1, ['meta.embedded.text.haskell.latex.haskell']], [2, ["keyword.other.type.haskell"]], [3, ["meta.type-signature.haskell"]], [4, ["entity.name.type.haskell"]], [6, ['keyword.operator.assignment.haskell']], [8, ['entity.name.type.haskell']], [10, ['keyword.operator.haskell']], [12, ['entity.name.type.haskell']], [13, ['meta.embedded.text.haskell.latex.haskell']]]]);
      });
      return it("parses inline code with pipes", function() {
        var g;
        g = grammarExpect(grammar, 'a |code||||| should parse correctly');
        g.toHaveTokens([['a ', '|', 'code', '||||', '|', ' should parse correctly']]);
        g.toHaveScopes([['text.tex.latex.haskell']]);
        return g.tokenToHaveScopes([[[1, ['meta.embedded.text.haskell.latex.haskell']], [2, ["identifier.haskell"]], [3, ["keyword.operator.haskell"]], [4, ['meta.embedded.text.haskell.latex.haskell']]]]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
