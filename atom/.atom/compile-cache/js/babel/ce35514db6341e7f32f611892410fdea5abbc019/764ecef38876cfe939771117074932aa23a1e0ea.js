Object.defineProperty(exports, '__esModule', {
  value: true
});
/** @babel */

var Config = atom.config;
var ua = require('universal-analytics');
var trackingId = 'UA-47544457-3';

var user = null;

function getUser() {
  var userId = atom.config.get("git-plus.general._analyticsUserId");
  if (!atom.config.get("git-plus.general._analyticsUserId")) {
    userId = require("uuid").v4();
    atom.config.set("git-plus.general._analyticsUserId", userId);
  }
  if (user === null) {
    user = ua(trackingId, userId, {
      headers: {
        "User-Agent": navigator.userAgent
      }
    });
  }
  return user;
}

function trackBooleanConfigIsOn(name) {
  getUser().event('Config', 'ON', name, { anonymizeIp: true }).send();
}

function trackBooleanConfigIsOff(name) {
  getUser().event('Config', 'OFF', name, { anonymizeIp: true }).send();
}

function trackIntConfigIsOn(name, value) {
  getUser().event('Config', 'ON', name, value, { anonymizeIp: true }).send();
}

function trackStringConfig(name, value) {
  getUser().event('Config', 'ON', name + ':' + value, { anonymizeIp: true }).send();
}

function trackConfig(name, value) {
  if (parseInt(value) >= 0) {
    trackIntConfigIsOn(name, value);
  } else if (value === true) {
    trackBooleanConfigIsOn(name);
  } else if (value === false) {
    trackBooleanConfigIsOff(name);
  } else if (value.charAt) {
    trackStringConfig(name, value);
  }
}

function track(name) {
  var configKey = 'git-plus.' + name;
  var config = Config.get(configKey);
  var schema = Config.getSchema(configKey);
  if (configKey === 'git-plus.general._analyticsUserId') return;
  if (schema.type === 'object') {
    Object.keys(schema.properties).forEach(function (property) {
      return track(name + '.' + property);
    });
  } else {
    trackConfig(configKey, config);
  }
}

// function trackConfigChanged(name, {oldValue, newValue}) {
//   getUser().event('Config', 'CHANGED', name, {anonymizeIp: true}).send()
// }

exports['default'] = function () {
  var userConfigs = Config.getAll('git-plus')[0];
  userConfigs = userConfigs.value;
  Object.keys(userConfigs).forEach(track);
  // Object.keys(userConfigs).forEach(config => {
  //   atom.config.onDidChange(`git-plus.${config}`, event => trackConfigChanged(name, event))
  // })
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2Vwc2UvRXBDb25mRmlsZXMvYXRvbS8uYXRvbS9wYWNrYWdlcy9naXQtcGx1cy9saWIvYW5hbHl0aWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtBQUMxQixJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQTtBQUN6QyxJQUFNLFVBQVUsR0FBRyxlQUFlLENBQUE7O0FBRWxDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQTs7QUFFZixTQUFTLE9BQU8sR0FBRztBQUNqQixNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFBO0FBQ2pFLE1BQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxFQUFFO0FBQ3pELFVBQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUE7QUFDN0IsUUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLEVBQUUsTUFBTSxDQUFDLENBQUE7R0FDN0Q7QUFDRCxNQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDakIsUUFBSSxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFO0FBQzVCLGFBQU8sRUFBRTtBQUNQLG9CQUFZLEVBQUUsU0FBUyxDQUFDLFNBQVM7T0FDbEM7S0FDRixDQUFDLENBQUE7R0FDSDtBQUNELFNBQU8sSUFBSSxDQUFBO0NBQ1o7O0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsU0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7Q0FDbEU7O0FBRUQsU0FBUyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUU7QUFDckMsU0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7Q0FDbkU7O0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ3ZDLFNBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtDQUN6RTs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDdEMsU0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUssSUFBSSxTQUFJLEtBQUssRUFBSSxFQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0NBQ2hGOztBQUVELFNBQVMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDaEMsTUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3hCLHNCQUFrQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtHQUNoQyxNQUNJLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtBQUN2QiwwQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtHQUM3QixNQUNJLElBQUksS0FBSyxLQUFLLEtBQUssRUFBRTtBQUN4QiwyQkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtHQUM5QixNQUNJLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUNyQixxQkFBaUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7R0FDL0I7Q0FDRjs7QUFFRCxTQUFTLEtBQUssQ0FBQyxJQUFJLEVBQUU7QUFDbkIsTUFBTSxTQUFTLGlCQUFlLElBQUksQUFBRSxDQUFBO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDcEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUMxQyxNQUFJLFNBQVMsS0FBSyxtQ0FBbUMsRUFBRSxPQUFNO0FBQzdELE1BQUksTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7QUFDNUIsVUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsUUFBUTthQUFJLEtBQUssQ0FBSSxJQUFJLFNBQUksUUFBUSxDQUFHO0tBQUEsQ0FBQyxDQUFBO0dBQ2pGLE1BQ0k7QUFDSCxlQUFXLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0dBQy9CO0NBQ0Y7Ozs7OztxQkFNYyxZQUFXO0FBQ3hCLE1BQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDOUMsYUFBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUE7QUFDL0IsUUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7Ozs7Q0FJeEMiLCJmaWxlIjoiL2hvbWUvZXBzZS9FcENvbmZGaWxlcy9hdG9tLy5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL2xpYi9hbmFseXRpY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbmNvbnN0IENvbmZpZyA9IGF0b20uY29uZmlnXG5jb25zdCB1YSA9IHJlcXVpcmUoJ3VuaXZlcnNhbC1hbmFseXRpY3MnKVxuY29uc3QgdHJhY2tpbmdJZCA9ICdVQS00NzU0NDQ1Ny0zJ1xuXG5sZXQgdXNlciA9IG51bGxcblxuZnVuY3Rpb24gZ2V0VXNlcigpIHtcbiAgbGV0IHVzZXJJZCA9IGF0b20uY29uZmlnLmdldChcImdpdC1wbHVzLmdlbmVyYWwuX2FuYWx5dGljc1VzZXJJZFwiKVxuICBpZiAoIWF0b20uY29uZmlnLmdldChcImdpdC1wbHVzLmdlbmVyYWwuX2FuYWx5dGljc1VzZXJJZFwiKSkge1xuICAgIHVzZXJJZCA9IHJlcXVpcmUoXCJ1dWlkXCIpLnY0KClcbiAgICBhdG9tLmNvbmZpZy5zZXQoXCJnaXQtcGx1cy5nZW5lcmFsLl9hbmFseXRpY3NVc2VySWRcIiwgdXNlcklkKVxuICB9XG4gIGlmICh1c2VyID09PSBudWxsKSB7XG4gICAgdXNlciA9IHVhKHRyYWNraW5nSWQsIHVzZXJJZCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIlVzZXItQWdlbnRcIjogbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIHVzZXJcbn1cblxuZnVuY3Rpb24gdHJhY2tCb29sZWFuQ29uZmlnSXNPbihuYW1lKSB7XG4gIGdldFVzZXIoKS5ldmVudCgnQ29uZmlnJywgJ09OJywgbmFtZSwge2Fub255bWl6ZUlwOiB0cnVlfSkuc2VuZCgpXG59XG5cbmZ1bmN0aW9uIHRyYWNrQm9vbGVhbkNvbmZpZ0lzT2ZmKG5hbWUpIHtcbiAgZ2V0VXNlcigpLmV2ZW50KCdDb25maWcnLCAnT0ZGJywgbmFtZSwge2Fub255bWl6ZUlwOiB0cnVlfSkuc2VuZCgpXG59XG5cbmZ1bmN0aW9uIHRyYWNrSW50Q29uZmlnSXNPbihuYW1lLCB2YWx1ZSkge1xuICBnZXRVc2VyKCkuZXZlbnQoJ0NvbmZpZycsICdPTicsIG5hbWUsIHZhbHVlLCB7YW5vbnltaXplSXA6IHRydWV9KS5zZW5kKClcbn1cblxuZnVuY3Rpb24gdHJhY2tTdHJpbmdDb25maWcobmFtZSwgdmFsdWUpIHtcbiAgZ2V0VXNlcigpLmV2ZW50KCdDb25maWcnLCAnT04nLCBgJHtuYW1lfToke3ZhbHVlfWAsIHthbm9ueW1pemVJcDogdHJ1ZX0pLnNlbmQoKVxufVxuXG5mdW5jdGlvbiB0cmFja0NvbmZpZyhuYW1lLCB2YWx1ZSkge1xuICBpZiAocGFyc2VJbnQodmFsdWUpID49IDApIHtcbiAgICB0cmFja0ludENvbmZpZ0lzT24obmFtZSwgdmFsdWUpXG4gIH1cbiAgZWxzZSBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICB0cmFja0Jvb2xlYW5Db25maWdJc09uKG5hbWUpXG4gIH1cbiAgZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgdHJhY2tCb29sZWFuQ29uZmlnSXNPZmYobmFtZSlcbiAgfVxuICBlbHNlIGlmICh2YWx1ZS5jaGFyQXQpIHtcbiAgICB0cmFja1N0cmluZ0NvbmZpZyhuYW1lLCB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFjayhuYW1lKSB7XG4gIGNvbnN0IGNvbmZpZ0tleSA9IGBnaXQtcGx1cy4ke25hbWV9YFxuICBjb25zdCBjb25maWcgPSBDb25maWcuZ2V0KGNvbmZpZ0tleSlcbiAgY29uc3Qgc2NoZW1hID0gQ29uZmlnLmdldFNjaGVtYShjb25maWdLZXkpXG4gIGlmIChjb25maWdLZXkgPT09ICdnaXQtcGx1cy5nZW5lcmFsLl9hbmFseXRpY3NVc2VySWQnKSByZXR1cm5cbiAgaWYgKHNjaGVtYS50eXBlID09PSAnb2JqZWN0Jykge1xuICAgIE9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IHRyYWNrKGAke25hbWV9LiR7cHJvcGVydHl9YCkpXG4gIH1cbiAgZWxzZSB7XG4gICAgdHJhY2tDb25maWcoY29uZmlnS2V5LCBjb25maWcpXG4gIH1cbn1cblxuLy8gZnVuY3Rpb24gdHJhY2tDb25maWdDaGFuZ2VkKG5hbWUsIHtvbGRWYWx1ZSwgbmV3VmFsdWV9KSB7XG4vLyAgIGdldFVzZXIoKS5ldmVudCgnQ29uZmlnJywgJ0NIQU5HRUQnLCBuYW1lLCB7YW5vbnltaXplSXA6IHRydWV9KS5zZW5kKClcbi8vIH1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCB1c2VyQ29uZmlncyA9IENvbmZpZy5nZXRBbGwoJ2dpdC1wbHVzJylbMF1cbiAgdXNlckNvbmZpZ3MgPSB1c2VyQ29uZmlncy52YWx1ZVxuICBPYmplY3Qua2V5cyh1c2VyQ29uZmlncykuZm9yRWFjaCh0cmFjaylcbiAgLy8gT2JqZWN0LmtleXModXNlckNvbmZpZ3MpLmZvckVhY2goY29uZmlnID0+IHtcbiAgLy8gICBhdG9tLmNvbmZpZy5vbkRpZENoYW5nZShgZ2l0LXBsdXMuJHtjb25maWd9YCwgZXZlbnQgPT4gdHJhY2tDb25maWdDaGFuZ2VkKG5hbWUsIGV2ZW50KSlcbiAgLy8gfSlcbn1cbiJdfQ==