var _libUtilsJs = require('../lib/utils.js');

'use babel';

describe('utils', function () {
  describe('when uniquifying settings', function () {
    it('should append numbers on equally named settings', function () {
      var settings = [{ name: 'name', cwd: 'cwd1' }, { name: 'name', cwd: 'cwd2' }, { name: 'name', cwd: 'cwd3' }, { name: 'name', cwd: 'cwd4' }];
      expect((0, _libUtilsJs.uniquifySettings)(settings)).toEqual([{ name: 'name', cwd: 'cwd1' }, { name: 'name - 1', cwd: 'cwd2' }, { name: 'name - 2', cwd: 'cwd3' }, { name: 'name - 3', cwd: 'cwd4' }]);
    });

    it('should append numbers on equally named settings, but leave unique names untouched', function () {
      var settings = [{ name: 'name', cwd: 'cwd1' }, { name: 'name', cwd: 'cwd2' }, { name: 'otherName', cwd: 'cwd3' }, { name: 'yetAnotherName', cwd: 'cwd4' }];
      expect((0, _libUtilsJs.uniquifySettings)(settings)).toEqual([{ name: 'name', cwd: 'cwd1' }, { name: 'name - 1', cwd: 'cwd2' }, { name: 'otherName', cwd: 'cwd3' }, { name: 'yetAnotherName', cwd: 'cwd4' }]);
    });
  });

  describe('when getting default settings', function () {
    it('should prioritize specified settings', function () {
      expect((0, _libUtilsJs.getDefaultSettings)('/cwd', { cmd: 'echo hello', cwd: 'relative' })).toEqual({
        cmd: 'echo hello',
        cwd: 'relative',
        args: [],
        env: {},
        sh: true,
        errorMatch: ''
      });
    });

    it('should be possible to override any argument', function () {
      expect((0, _libUtilsJs.getDefaultSettings)('/cwd', {
        cmd: 'echo hello',
        cwd: 'relative',
        args: ['arg1'],
        env: { 'key1': 'val1' },
        sh: false,
        errorMatch: '^regex$'
      })).toEqual({
        cmd: 'echo hello',
        cwd: 'relative',
        args: ['arg1'],
        env: { 'key1': 'val1' },
        sh: false,
        errorMatch: '^regex$'
      });
    });

    it('should take the specifed cwd if omitted from settings', function () {
      expect((0, _libUtilsJs.getDefaultSettings)('/cwd', { cmd: 'make' })).toEqual({
        cmd: 'make',
        cwd: '/cwd',
        args: [],
        env: {},
        sh: true,
        errorMatch: ''
      });
    });

    it('should not replace values which are not strings', function () {
      expect((0, _libUtilsJs.replace)(12)).toEqual(12);
      expect((0, _libUtilsJs.replace)({ a: '{FILE_ACTIVE}' })).toEqual({ a: '{FILE_ACTIVE}' });
      expect((0, _libUtilsJs.replace)([1, 2, 3])).toEqual([1, 2, 3]);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2Vwc2UvRXBDb25mRmlsZXMvYXRvbS8uYXRvbS9wYWNrYWdlcy9idWlsZC9zcGVjL3V0aWxzLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjBCQUU4RCxpQkFBaUI7O0FBRi9FLFdBQVcsQ0FBQzs7QUFJWixRQUFRLENBQUMsT0FBTyxFQUFFLFlBQU07QUFDdEIsVUFBUSxDQUFDLDJCQUEyQixFQUFFLFlBQU07QUFDMUMsTUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQU07QUFDMUQsVUFBTSxRQUFRLEdBQUcsQ0FDZixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUM3QixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUM3QixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUM3QixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUM5QixDQUFDO0FBQ0YsWUFBTSxDQUFDLGtDQUFpQixRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUN6QyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUM3QixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUNqQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUNqQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUNsQyxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLG1GQUFtRixFQUFFLFlBQU07QUFDNUYsVUFBTSxRQUFRLEdBQUcsQ0FDZixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUM3QixFQUFFLElBQUksRUFBRSxNQUFNLEVB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QUM7S0FDbkQsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6Ii9ob21lL2Vwc2UvRXBDb25mRmlsZXMvYXRvbS8uYXRvbS9wYWNrYWdlcy9idWlsZC9zcGVjL3V0aWxzLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IHsgdW5pcXVpZnlTZXR0aW5ncywgZ2V0RGVmYXVsdFNldHRpbmdzLCByZXBsYWNlIH0gZnJvbSAnLi4vbGliL3V0aWxzLmpzJztcblxuZGVzY3JpYmUoJ3V0aWxzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnd2hlbiB1bmlxdWlmeWluZyBzZXR0aW5ncycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGFwcGVuZCBudW1iZXJzIG9uIGVxdWFsbHkgbmFtZWQgc2V0dGluZ3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzZXR0aW5ncyA9IFtcbiAgICAgICAgeyBuYW1lOiAnbmFtZScsIGN3ZDogJ2N3ZDEnIH0sXG4gICAgICAgIHsgbmFtZTogJ25hbWUnLCBjd2Q6ICdjd2QyJyB9LFxuICAgICAgICB7IG5hbWU6ICduYW1lJywgY3dkOiAnY3dkMycgfSxcbiAgICAgICAgeyBuYW1lOiAnbmFtZScsIGN3ZDogJ2N3ZDQnIH1cbiAgICAgIF07XG4gICAgICBleHBlY3QodW5pcXVpZnlTZXR0aW5ncyhzZXR0aW5ncykpLnRvRXF1YWwoW1xuICAgICAgICB7IG5hbWU6ICduYW1lJywgY3dkOiAnY3dkMScgfSxcbiAgICAgICAgeyBuYW1lOiAnbmFtZSAtIDEnLCBjd2Q6ICdjd2QyJyB9LFxuICAgICAgICB7IG5hbWU6ICduYW1lIC0gMicsIGN3ZDogJ2N3ZDMnIH0sXG4gICAgICAgIHsgbmFtZTogJ25hbWUgLSAzJywgY3dkOiAnY3dkNCcgfVxuICAgICAgXSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFwcGVuZCBudW1iZXJzIG9uIGVxdWFsbHkgbmFtZWQgc2V0dGluZ3MsIGJ1dCBsZWF2ZSB1bmlxdWUgbmFtZXMgdW50b3VjaGVkJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2V0dGluZ3MgPSBbXG4gICAgICAgIHsgbmFtZTogJ25hbWUnLCBjd2Q6ICdjd2QxJyB9LFxuICAgICAgICB7IG5hbWU6ICduYW1lJywgY3dkOiAnY3dkMicgfSxcbiAgICAgICAgeyBuYW1lOiAnb3RoZXJOYW1lJywgY3dkOiAnY3dkMycgfSxcbiAgICAgICAgeyBuYW1lOiAneWV0QW5vdGhlck5hbWUnLCBjd2Q6ICdjd2Q0JyB9XG4gICAgICBdO1xuICAgICAgZXhwZWN0KHVuaXF1aWZ5U2V0dGluZ3Moc2V0dGluZ3MpKS50b0VxdWFsKFtcbiAgICAgICAgeyBuYW1lOiAnbmFtZScsIGN3ZDogJ2N3ZDEnIH0sXG4gICAgICAgIHsgbmFtZTogJ25hbWUgLSAxJywgY3dkOiAnY3dkMicgfSxcbiAgICAgICAgeyBuYW1lOiAnb3RoZXJOYW1lJywgY3dkOiAnY3dkMycgfSxcbiAgICAgICAgeyBuYW1lOiAneWV0QW5vdGhlck5hbWUnLCBjd2Q6ICdjd2Q0JyB9XG4gICAgICBdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3doZW4gZ2V0dGluZyBkZWZhdWx0IHNldHRpbmdzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcHJpb3JpdGl6ZSBzcGVjaWZpZWQgc2V0dGluZ3MnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0RGVmYXVsdFNldHRpbmdzKCcvY3dkJywgeyBjbWQ6ICdlY2hvIGhlbGxvJywgY3dkOiAncmVsYXRpdmUnIH0pKS50b0VxdWFsKHtcbiAgICAgICAgY21kOiAnZWNobyBoZWxsbycsXG4gICAgICAgIGN3ZDogJ3JlbGF0aXZlJyxcbiAgICAgICAgYXJnczogW10sXG4gICAgICAgIGVudjoge30sXG4gICAgICAgIHNoOiB0cnVlLFxuICAgICAgICBlcnJvck1hdGNoOiAnJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIHBvc3NpYmxlIHRvIG92ZXJyaWRlIGFueSBhcmd1bWVudCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXREZWZhdWx0U2V0dGluZ3MoJy9jd2QnLCB7XG4gICAgICAgIGNtZDogJ2VjaG8gaGVsbG8nLFxuICAgICAgICBjd2Q6ICdyZWxhdGl2ZScsXG4gICAgICAgIGFyZ3M6IFsgJ2FyZzEnIF0sXG4gICAgICAgIGVudjogeyAna2V5MSc6ICd2YWwxJyB9LFxuICAgICAgICBzaDogZmFsc2UsXG4gICAgICAgIGVycm9yTWF0Y2g6ICdecmVnZXgkJ1xuICAgICAgfSkpLnRvRXF1YWwoe1xuICAgICAgICBjbWQ6ICdlY2hvIGhlbGxvJyxcbiAgICAgICAgY3dkOiAncmVsYXRpdmUnLFxuICAgICAgICBhcmdzOiBbICdhcmcxJyBdLFxuICAgICAgICBlbnY6IHsgJ2tleTEnOiAndmFsMScgfSxcbiAgICAgICAgc2g6IGZhbHNlLFxuICAgICAgICBlcnJvck1hdGNoOiAnXnJlZ2V4JCdcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0YWtlIHRoZSBzcGVjaWZlZCBjd2QgaWYgb21pdHRlZCBmcm9tIHNldHRpbmdzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldERlZmF1bHRTZXR0aW5ncygnL2N3ZCcsIHsgY21kOiAnbWFrZScgfSkpLnRvRXF1YWwoe1xuICAgICAgICBjbWQ6ICdtYWtlJyxcbiAgICAgICAgY3dkOiAnL2N3ZCcsXG4gICAgICAgIGFyZ3M6IFtdLFxuICAgICAgICBlbnY6IHt9LFxuICAgICAgICBzaDogdHJ1ZSxcbiAgICAgICAgZXJyb3JNYXRjaDogJydcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgcmVwbGFjZSB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpbmdzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHJlcGxhY2UoMTIpKS50b0VxdWFsKDEyKTtcbiAgICAgIGV4cGVjdChyZXBsYWNlKHthOiAne0ZJTEVfQUNUSVZFfScgfSkpLnRvRXF1YWwoe2E6ICd7RklMRV9BQ1RJVkV9J30pO1xuICAgICAgZXhwZWN0KHJlcGxhY2UoWyAxLCAyLCAzIF0pKS50b0VxdWFsKFsgMSwgMiwgMyBdKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==